#line 2 "/mnt/c/Users/paull/Onedrive/Bureau/Compilateur/dessin/build/scanner.cpp"

#line 4 "/mnt/c/Users/paull/Onedrive/Bureau/Compilateur/dessin/build/scanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int Scanner::yylex()

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 78
#define YY_END_OF_BUFFER 79
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[311] =
    {   0,
        0,    0,   79,   78,   65,   78,   78,   78,   17,   10,
        6,    7,    3,    2,   18,    4,   16,    5,   63,    9,
       11,   30,    8,   32,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   14,   15,
       76,   76,   76,   76,   76,   76,   76,   76,   12,   13,
       78,   78,   29,   77,    0,    0,   20,   59,    0,   63,
       31,   28,   33,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,    0,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,    0,   76,   76,    0,   22,

       76,   76,   19,    0,    0,    0,   64,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,    0,   76,
       76,   76,   76,   76,   76,   76,   34,   76,    1,   76,
       76,    0,   76,   76,    0,   76,   76,   76,    0,    0,
       76,   69,   76,   76,   76,   76,   76,   73,   76,   76,
       76,   76,   76,   76,   76,   74,   76,   76,   76,   76,
       76,    0,   48,   76,   76,   76,   68,   76,   76,   76,
       27,   76,    0,   76,    0,    0,   76,   76,   61,    0,
        0,   75,    0,    0,   76,   76,   76,   76,   76,   76,

       70,   76,   43,   76,   76,   76,   76,   76,   67,   56,
       76,   45,   76,   76,   23,   62,   76,    0,   76,    0,
        0,    0,    0,    0,   24,    0,    0,    0,    0,   39,
       41,   44,   76,   76,   54,   76,   76,   76,   76,   76,
       76,   76,   37,   76,   71,   76,    0,   76,    0,    0,
        0,    0,    0,    0,   60,    0,   49,   42,   47,   46,
       72,    0,   76,   76,   76,   76,   76,    0,   76,    0,
        0,    0,    0,    0,    0,    0,   55,   52,   76,   76,
       50,   40,   21,    0,   76,    0,    0,    0,   25,   26,
        0,   38,   76,   35,   57,   58,    0,    0,    0,    0,

        0,   76,   57,   58,   66,    0,    0,   53,   51,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    4,    5,    6,    1,    7,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
       21,   21,   21,   22,   22,   22,   22,   23,   24,   25,
       26,   27,    1,    1,   28,   29,   30,   31,   32,   31,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       37,   43,   44,   45,   46,   47,   37,   48,   49,   37,
       50,    1,   51,    1,    1,    1,   52,   53,   54,   31,

       55,   56,   57,   58,   59,   60,   37,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   37,   72,
       73,   37,   74,    1,   75,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,   76,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,   77,   78,    1,
        1,    1,    1,    1,    1,   79,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   80,   81,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[82] =
    {   0,
        1,    1,    1,    1,    2,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    3,    3,
        3,    3,    1,    1,    1,    1,    1,    3,    3,    3,
        3,    3,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    1,
        1,    3,    3,    3,    3,    3,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    1,    1,    1,    1,    1,    1,    1,
        1
    } ;

static const flex_int16_t yy_base[319] =
    {   0,
        0,    0,  327, 1892, 1892,  300,  319,    0, 1892,  315,
     1892, 1892, 1892, 1892, 1892,  294, 1892, 1892,   66, 1892,
     1892,  294,  290,  284,   71,   76,  123,   85,  100,  111,
      148,  170,  183,  190,  195,   90,  197,  198, 1892, 1892,
      187,  231,  241,  226,  233,   43,  270,  276, 1892, 1892,
      227,   23, 1892, 1892,  110,    0, 1892, 1892,  326,  334,
     1892, 1892, 1892,  277,  327,  332,  330,  331,  335,  351,
      373,  369,  116,  396,  385,  420,  409,  423,  435,  447,
      461,  479,  485,   58,  479,  503,  504,  531,  532,  524,
      537,  539,  543,  553,  569,  248,  577,  586,   71,  585,

      596,  623, 1892,   85,  293,    0,  647,  612,  639,  636,
      649,  665,  675,  683,  684,  694,  721,  725,  710,  734,
      737,  728,  744,  749,  769,  780,  787,  799,  106,  805,
      780,  826,  839,  836,  835,  845,  871,  877,  880,  881,
      893,  223,  912,  913,  130,  905,  923,  927,   74,    0,
      947,  952,  957,  958,  956,  985,  977,  995, 1010,  999,
     1002, 1015, 1023, 1030, 1029, 1044, 1060, 1061, 1070, 1080,
     1095,  133, 1098, 1097, 1113, 1106, 1117, 1120, 1132, 1132,
     1150, 1151,  218, 1157,  906,  204, 1148, 1187, 1179,  123,
        0, 1190,  121,  142, 1202, 1199, 1223, 1233, 1236, 1249,

     1250, 1260, 1276, 1282, 1286, 1295, 1322, 1330, 1298, 1892,
     1204, 1332, 1345, 1339, 1360, 1363, 1373,  281, 1375,  269,
     1428, 1439, 1448,  198, 1423,  204,  177,    0,  191, 1892,
     1431, 1433, 1439, 1443, 1444, 1468, 1478, 1498, 1496, 1511,
     1517, 1526, 1531, 1372, 1508, 1532,  201, 1533, 1471, 1580,
      721,  175,  164,  212, 1892,  191, 1574, 1576, 1577, 1578,
     1579,  165, 1583, 1584, 1610, 1598, 1623,  174, 1626,  192,
     1678, 1687, 1696,  138,  131,  205, 1892, 1892, 1640, 1691,
     1670, 1671, 1681,  112, 1692, 1709, 1739, 1656, 1892, 1892,
      231, 1722, 1733, 1892, 1749, 1760,  163, 1773, 1787, 1799,

      246, 1770, 1772, 1783, 1892, 1811, 1824, 1892, 1805, 1892,
     1885,  170, 1887,  162,  157,  150,  113,   80
    } ;

static const flex_int16_t yy_def[319] =
    {   0,
      310,    1,  310,  310,  310,  310,  311,  312,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,   35,   35,  310,  310,
       35,   35,   35,   35,   35,   35,   35,   35,  310,  310,
      310,  310,  310,  310,  311,  314,  310,  310,  310,  310,
      310,  310,  310,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,  310,   35,   35,   35,   35,   35,   35,
       35,   35,   42,   42,   42,  310,   42,   42,  310,   42,

       42,   42,  310,  310,  311,  315,  310,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   35,   35,   35,   35,   35,   35,   35,  310,   35,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,  310,   42,   42,  310,   35,   35,   35,  310,  316,
       35,   35,   35,   35,   42,   42,   35,   35,   35,   35,
       35,   35,   35,   35,   42,   42,   42,   42,   42,   42,
       35,  310,   35,   42,   35,   42,   42,   35,   42,   35,
       35,   35,  310,   35,  310,  310,   42,   42,   42,  310,
      317,   42,  310,  310,   35,   42,   42,   42,   42,   42,

       42,   42,   42,   42,   42,   42,   42,   42,   42,  310,
       35,   35,   35,   35,   35,   35,   35,  310,   35,  310,
      310,  310,  310,  310,   35,  310,  310,  318,  310,  310,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       42,   35,   35,   42,   42,   35,  310,   35,  310,  310,
      310,  310,  310,  310,  310,  310,   35,   35,   35,   35,
       35,  310,   42,   42,   42,   35,   42,  310,   42,  310,
      310,  310,  310,  310,  310,  310,  310,  310,   35,   35,
       35,   35,   35,  310,   35,  310,  310,  310,  310,  310,
      310,   35,   35,  310,  313,  313,  310,  310,  310,  310,

      310,   35,   35,   35,  310,  310,  310,  310,   35,    0,
      310,  310,  310,  310,  310,  310,  310,  310
    } ;

static const flex_int16_t yy_nxt[1974] =
    {   0,
        4,    5,    4,    6,    7,    8,    9,   10,    4,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   19,   19,
       19,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       25,   28,   25,   29,   25,   30,   25,   31,   32,   33,
       34,   25,   35,   36,   37,   25,   38,   25,   25,   39,
       40,   41,   26,   27,   42,   43,   25,   29,   25,   30,
       31,   32,   44,   34,   45,   25,   46,   47,   48,   25,
       38,   25,   25,   49,   50,    4,    4,    4,    4,   51,
       52,   59,  255,   60,   60,   60,   60,   60,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,  104,   98,

      104,  190,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,  105,   66,   54,  228,   67,   64,   64,   64,
       64,   64,   73,   99,   74,  190,  149,   75,   64,   64,
       64,   64,   64,  129,   85,  129,   66,  172,   76,   67,
       64,   64,   64,   64,   64,   73,  129,   74,  145,  149,
       68,   75,  191,  116,   69,   65,   70,  227,   85,  150,
      172,  172,   76,   71,  106,   64,   64,   64,   64,   64,
      210,   72,   56,  305,   68,   77,  116,   69,   65,  294,
       70,  227,   78,   65,  172,  290,   71,   64,   64,   64,
       64,   64,  289,  210,  186,   72,  229,   79,  229,   77,

       64,   64,   64,   64,   64,  286,   78,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,  230,   65,  230,
      254,   79,  256,   80,   86,  284,   82,   65,   87,   89,
      277,   81,   90,  275,   96,   83,  291,   65,   65,   88,
      278,   65,  278,  274,  254,  256,   80,   91,   86,   82,
       65,   87,   89,  277,   81,  276,   90,   65,   83,  291,
       65,   65,   65,   88,   65,  268,   80,  310,   73,  253,
       74,   65,   65,   65,  252,   84,  301,  310,  310,  276,
       65,   65,  249,  247,  224,   65,  218,   65,  308,   80,
      183,   73,   93,   74,   65,   65,   97,   54,   92,   94,

      301,   65,  142,   86,   95,  103,  310,   87,   65,   63,
       65,  310,  308,  310,   85,   62,   65,   65,   88,   61,
       58,  310,   57,   54,   65,   53,  310,  101,  100,  310,
       87,   65,  310,   65,  310,  310,  310,  310,   85,   65,
       65,  310,  102,  107,  107,  107,  107,  107,  310,   59,
      310,   60,   60,   60,   60,   60,  310,  310,   65,  108,
      310,   65,   65,  109,  310,  310,   65,   65,  310,  310,
      110,   65,   65,  111,  310,   65,  310,  112,  310,  310,
      310,   65,  113,  108,   65,   65,  109,  310,  310,   65,
       65,   65,  310,  110,   65,   65,  115,  111,   65,  310,

       65,  112,  310,  310,   65,  113,  310,  310,  310,   65,
      310,  310,  310,   65,   65,  310,  310,  310,  114,  310,
      115,  310,   65,   65,   65,  310,  310,   65,  310,  310,
      118,  310,   65,   65,  310,   65,   65,  310,  310,  310,
      117,  310,  114,  310,  310,   65,   65,   65,   65,  310,
      310,  120,   65,  310,  118,  121,   65,   65,   65,   65,
       65,  310,   65,   65,  117,  119,  310,  122,  310,   65,
      310,   65,   65,  310,   65,  120,   65,  310,  310,  121,
       65,  123,   65,   65,   65,   65,   65,   65,  124,  119,
       65,  122,  310,  310,  310,   65,  310,   65,   65,  310,

       65,  310,   65,  310,  310,  123,  310,   65,  125,   65,
       65,  310,  124,  310,   65,  310,   65,  126,   65,  130,
      310,   65,   65,   65,   65,  310,  310,  310,   65,  127,
      128,  310,  125,   65,   65,   65,  310,  131,  310,   65,
      126,   65,  130,   65,   65,   65,   65,   65,  310,  310,
      310,  132,   65,  127,  128,   65,  310,   65,   65,  310,
      310,  131,   65,   65,  135,  133,   65,   65,   65,  310,
       65,   65,   65,  310,  134,  132,  310,   65,   65,   65,
       65,  310,   65,  310,  310,   65,   65,  135,  310,  133,
       65,   65,   65,   65,   65,   65,  310,  310,  134,  310,

      136,  310,   65,  138,  310,   65,   65,  137,   65,  310,
       65,  310,  310,   65,   65,  139,   65,  310,  310,  310,
       65,  310,   65,   65,   65,   65,  310,  140,  310,   65,
      131,  141,  310,   65,  310,   65,   65,   65,  144,   65,
      310,  310,  310,  310,  143,   65,   65,  146,   65,   65,
      310,  151,   65,   65,  131,  310,   65,  133,  147,  310,
       65,  310,   65,   65,  107,  107,  107,  107,  107,  310,
      310,  310,   65,  153,  151,   65,   65,  310,   65,   65,
      310,  133,  310,   65,  152,   65,   65,  310,   65,  310,
       65,  154,  148,  310,  155,  310,  153,  310,   65,   65,

      310,   65,   65,   65,   65,  310,   65,  310,  152,   65,
      310,   65,   65,  156,   65,  154,   65,  310,  155,  310,
      157,   65,   65,  158,  310,   65,  310,   65,  159,  310,
      310,   65,   65,   65,  249,   65,  156,   65,  220,  220,
      220,  220,   65,  157,   65,   65,  158,   65,  310,  162,
       65,   65,  159,  310,   65,  160,   65,  310,   65,  165,
       65,   65,   65,  310,   65,  310,  163,  310,   65,  161,
       65,   65,  162,   65,   65,   65,  164,   65,  167,  160,
       65,   65,  165,   65,   65,   65,  166,   65,   65,   65,
      163,   65,   65,  161,   65,  310,   65,   65,   65,  164,

       65,   65,  167,   65,   65,  310,  310,   65,  310,   65,
      166,   65,   65,  168,  170,  310,  310,  174,   65,   65,
       65,  169,  310,   65,  310,  310,  310,   65,  310,  310,
       65,  171,   65,  310,   65,  310,   65,  168,  170,   65,
      174,   65,   65,   65,  169,   65,  173,   65,  310,  310,
       65,  310,  310,   65,  310,  171,  310,  310,  310,   65,
      310,  310,   65,   65,  310,   65,  176,  310,   65,  173,
      175,  310,  178,   65,   65,   65,   65,  310,   65,  310,
      177,  310,   65,  310,   65,  310,   65,  310,   65,  310,
      176,  310,  310,   65,  175,  178,   65,   65,   65,   65,

      310,   65,   65,   65,  177,   65,   65,   65,   65,  310,
       65,  179,   65,  310,   65,  310,   65,   65,   65,   65,
       65,  310,  185,  220,  221,  222,  223,  223,  310,  310,
       65,   65,   65,   65,  310,  310,   65,   65,   65,   65,
       65,   65,   65,   65,  180,   65,  182,   65,  181,   65,
       65,   65,   65,   65,   65,   65,  310,  310,   65,   65,
       65,  310,  310,   65,  310,  310,  310,   65,  187,  310,
      184,  310,   65,   65,   65,   65,  192,   65,   65,   65,
       65,  189,  310,   65,  310,  310,   65,   65,   65,   65,
       65,  188,   65,  195,  310,   65,  310,   65,   65,  310,

      192,   65,  310,  310,  310,  310,   65,  310,  197,  310,
       65,   65,   65,  310,  310,   65,  195,   65,   65,  196,
       65,   65,   65,   65,   65,  310,   65,  310,  310,  310,
      199,  197,  310,  200,  310,   65,  310,  193,  194,   65,
       65,   65,   65,  196,  310,   65,  201,   65,  310,   65,
       65,  198,   65,  199,  202,   65,  200,  310,   65,  310,
      310,  203,   65,   65,   65,   65,   65,  310,  204,  201,
       65,  310,  310,   65,  198,  310,  310,  202,   65,  310,
      310,   65,  310,   65,  203,  310,   65,  310,  206,   65,
      310,  204,  310,   65,  205,  310,   65,   65,   65,   65,

       65,  310,  310,  310,   65,  310,   65,  207,  310,   65,
      310,   65,  206,  310,  310,  310,  310,   65,  205,   65,
       65,   65,   65,   65,  208,  310,  209,   65,   65,   65,
      207,  310,   65,  310,  211,   65,   65,   65,   65,  310,
       65,  310,   65,   65,  212,  213,  310,   65,  208,  209,
      310,  214,   65,   65,   65,  310,   65,  211,   65,   65,
       65,   65,  310,   65,   65,  310,   65,  212,  213,   65,
      310,   65,   65,   65,  214,  310,   65,   65,  310,   65,
      310,   65,   65,   65,   65,   65,  216,   65,   65,  226,
       65,   65,   65,  310,   65,   65,  310,   65,  310,  215,

      310,  310,  310,  310,   65,   65,  310,  310,   65,  310,
      225,   65,  310,   65,   65,   65,   65,  310,   65,  217,
       65,  310,  310,  310,   65,  219,   65,   65,  310,   65,
      310,  310,  310,  231,  310,  243,   65,  310,  232,   65,
      310,   65,   65,  310,   65,  310,   65,   65,  310,   65,
       65,  310,   65,  310,   65,  310,  231,   65,  243,   65,
       65,  232,   65,  310,  310,   65,   65,   65,  233,  310,
       65,  310,   65,   65,  310,   65,  234,  310,  235,  310,
      310,  310,  310,   65,  310,   65,   65,   65,   65,   65,
       65,  310,  233,   65,  236,   65,   65,   65,   65,   65,

      234,  310,  235,   65,  310,  237,  310,  310,  310,   65,
       65,   65,   65,   65,  310,   65,   65,   65,  236,   65,
       65,   65,   65,   65,  310,   65,  238,   65,  310,  237,
      239,  310,   65,  310,  240,   65,   65,   65,   65,  310,
      310,  310,   65,   65,   65,  310,   65,  310,   65,   65,
      238,  310,  310,   65,  239,   65,  241,  240,   65,   65,
       65,   65,   65,   65,  242,   65,  310,   65,  310,   65,
       65,  310,   65,  310,  310,  310,   65,  244,  310,   65,
      241,  310,   65,  245,   65,   65,   65,  310,  242,   65,
       65,   65,   65,   65,   65,   65,  310,   65,  310,   65,

       65,  244,   65,   65,   65,  310,   65,  245,   65,  266,
      310,   65,  310,   65,   65,   65,  310,   65,  310,  310,
      310,  310,  310,   65,  310,  310,   65,   65,  310,   65,
      310,  246,  266,  248,   65,  310,   65,  310,   65,   65,
      310,  249,  310,  310,  310,  250,  250,  250,  250,  250,
      310,  310,  249,  310,   65,  310,  251,  251,  251,  251,
      220,  249,   65,   65,   65,  220,  220,  220,  220,  220,
       65,   65,  310,   65,  258,   65,  310,   65,  310,   65,
      310,  257,  310,   65,   65,   65,   65,   65,  270,  271,
      272,  273,  273,   65,   65,  310,   65,  258,   65,   65,

      310,  310,   65,  310,  310,  257,   65,   65,   65,   65,
      259,  310,  310,  310,  310,  310,  310,  310,   65,  310,
      260,  310,   65,  310,  310,  261,  310,   65,  310,   65,
      310,   65,   65,  310,  259,  310,   65,  310,   65,  310,
      310,   65,   65,  263,  260,   65,  310,   65,  310,  261,
       65,   65,   65,  310,   65,  310,   65,   65,  310,   65,
      264,   65,   65,   65,   65,   65,  265,  263,   65,  310,
       65,   65,   65,   65,   65,   65,  262,   65,  310,   65,
       65,  310,  310,  310,  264,   65,   65,   65,  310,  265,
      310,  310,  310,  249,   65,  267,  269,  220,  220,  220,

      220,  220,  310,  310,  310,   65,  310,   65,   65,   65,
       65,  310,  310,  310,   65,  310,   65,   65,   65,   65,
      279,   65,   65,   65,  310,  310,  310,  280,   65,  282,
       65,   65,   65,   65,  310,  310,  310,   65,   65,   65,
       65,   65,   65,  279,   65,   65,   65,   65,  310,  281,
       65,  280,  282,  310,  310,  310,  310,  310,  310,  310,
       65,   65,   65,   65,  310,   65,  310,  310,  310,  286,
       65,  292,  281,  270,  270,  270,  270,   65,  310,  310,
       65,  310,  310,   65,  310,  283,   65,  310,  285,  310,
       65,  286,  310,   65,  292,  287,  287,  287,  287,  287,

      286,   65,   65,   65,  288,  288,  288,  288,  270,  286,
       65,   65,   65,  270,  270,  270,  270,  270,  293,  310,
      310,   65,   65,   65,   65,   65,  297,  298,  299,  300,
      300,   65,   65,   65,   65,   65,  310,  310,  310,  295,
      296,  310,  293,  310,   65,   65,   65,  310,  310,  310,
      310,  310,  286,   65,   65,   65,  270,  270,  270,  270,
      270,  310,   65,  310,   65,  302,   64,  303,  303,  303,
      303,  310,  310,   65,  310,  310,   65,   64,  304,  304,
      304,  304,  310,  305,  310,   65,  310,   65,  310,  302,
      306,  306,  306,  306,  306,  310,   65,  305,  310,  310,

      310,  309,  310,   65,  307,  307,  307,  307,  297,  305,
       65,  310,   65,  310,   65,  310,  297,  297,  297,  297,
      297,  305,  310,   65,  309,  310,   65,  310,  297,  297,
      297,  297,  297,   65,  305,   65,   65,   65,  310,  310,
      310,  297,  297,  297,  297,   65,   65,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,   65,
      310,  310,  310,  310,  310,  310,  310,  310,   65,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,   55,   55,   55,   65,
       65,    3,  310,  310,  310,  310,  310,  310,  310,  310,

      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310
    } ;

static const flex_int16_t yy_chk[1974] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,   19,  318,   19,   19,   19,   19,   19,   25,   25,
       25,   25,   25,   26,   26,   26,   26,   26,   52,   46,

       52,  149,   28,   28,   28,   28,   28,   36,   36,   36,
       36,   36,   55,   26,   55,  317,   26,   29,   29,   29,
       29,   29,   28,   46,   28,  149,  104,   29,   30,   30,
       30,   30,   30,   84,   36,   84,   26,  129,   30,   26,
       27,   27,   27,   27,   27,   28,   99,   28,   99,  104,
       27,   29,  316,   73,   27,   73,   27,  190,   36,  315,
      129,  145,   30,   27,  314,   31,   31,   31,   31,   31,
      172,   27,  312,  297,   27,   31,   73,   27,   73,  284,
       27,  190,   31,   73,  145,  275,   27,   32,   32,   32,
       32,   32,  274,  172,  145,   27,  193,   32,  193,   31,

       33,   33,   33,   33,   33,  270,   31,   34,   34,   34,
       34,   34,   35,   35,   35,   35,   35,  194,   41,  194,
      227,   32,  229,   33,   37,  268,   35,   41,   37,   38,
      256,   34,   38,  253,   44,   35,  276,   37,   38,   37,
      262,   41,  262,  252,  227,  229,   33,   41,   37,   35,
       41,   37,   38,  256,   34,  254,   38,   44,   35,  276,
       37,   38,   42,   37,   45,  247,   44,   41,   42,  226,
       42,   42,   43,   45,  224,   35,  291,   37,   38,  254,
       44,   43,  220,  218,  186,   42,  183,   45,  301,   44,
      142,   42,   43,   42,   42,   43,   45,  105,   42,   43,

      291,   47,   96,   48,   43,   51,   44,   48,   64,   24,
       47,   42,  301,   45,   47,   23,   48,   64,   48,   22,
       16,   43,   10,    7,   47,    6,    3,   48,   47,    0,
       48,   64,    0,   47,    0,    0,    0,    0,   47,   48,
       64,    0,   48,   59,   59,   59,   59,   59,    0,   60,
       47,   60,   60,   60,   60,   60,   48,   64,   65,   66,
        0,   67,   68,   66,    0,    0,   69,   65,    0,    0,
       67,   68,   66,   68,    0,   69,    0,   69,    0,    0,
        0,   65,   70,   66,   67,   68,   66,    0,    0,   69,
       65,   70,    0,   67,   68,   66,   72,   68,   69,    0,

       72,   69,    0,    0,   71,   70,    0,   65,    0,   72,
       67,   68,   66,   71,   70,   69,    0,    0,   71,    0,
       72,    0,   75,   72,   75,    0,    0,   71,    0,    0,
       75,   70,   72,   74,    0,   74,   71,    0,    0,    0,
       74,    0,   71,    0,    0,   75,   77,   75,   77,   72,
        0,   77,   75,   71,   75,   78,   74,   76,   74,   76,
       78,    0,   78,   74,   74,   76,    0,   79,    0,   77,
        0,   77,   79,    0,   79,   77,   77,    0,    0,   78,
       76,   80,   76,   78,   80,   78,   80,   76,   81,   76,
       78,   79,    0,    0,    0,   79,    0,   79,   81,    0,

       81,    0,   79,    0,    0,   80,    0,   80,   82,   80,
       85,    0,   81,    0,   80,    0,   82,   82,   82,   85,
        0,   81,   83,   81,   83,    0,    0,    0,   81,   83,
       83,    0,   82,   85,   86,   87,    0,   86,    0,   82,
       82,   82,   85,   86,   87,   83,   82,   83,    0,    0,
        0,   87,   83,   83,   83,   90,    0,   86,   87,   85,
        0,   86,   88,   89,   90,   88,   86,   87,   91,    0,
       92,   88,   89,    0,   89,   87,    0,   91,   90,   92,
       93,    0,   93,   86,   87,   88,   89,   90,    0,   88,
       94,   91,   94,   92,   88,   89,    0,    0,   89,    0,

       91,    0,   92,   93,   90,   93,   95,   92,   95,    0,
       93,   88,   89,   94,   97,   94,   97,   91,    0,   92,
       94,    0,  100,   98,  100,   98,    0,   95,    0,   95,
      101,   95,    0,  101,    0,  101,   95,   97,   98,   97,
        0,    0,    0,    0,   97,  100,   98,  100,   98,  108,
        0,  108,  100,   98,  101,    0,  101,  102,  101,    0,
      102,    0,  102,  101,  107,  107,  107,  107,  107,    0,
        0,    0,  108,  110,  108,  110,  109,    0,  109,  108,
        0,  102,    0,  102,  109,  102,  111,    0,  111,    0,
      102,  111,  102,    0,  112,    0,  110,    0,  110,  109,

        0,  109,  112,  110,  112,    0,  109,    0,  109,  111,
        0,  111,  113,  113,  113,  111,  111,    0,  112,    0,
      114,  115,  114,  115,    0,  112,    0,  112,  116,    0,
        0,  116,  112,  116,  251,  113,  113,  113,  251,  251,
      251,  251,  113,  114,  115,  114,  115,  119,    0,  119,
      114,  115,  116,    0,  116,  117,  116,    0,  117,  122,
      117,  116,  118,    0,  118,    0,  120,    0,  122,  118,
      119,  120,  119,  120,  121,  123,  121,  119,  124,  117,
      124,  117,  122,  117,  123,  118,  123,  118,  117,  124,
      120,  122,  118,  118,  120,    0,  120,  121,  123,  121,

      125,  120,  124,  124,  121,    0,    0,  123,  122,  125,
      123,  126,  124,  125,  127,    0,    0,  131,  127,  131,
      126,  126,    0,  125,  123,    0,    0,  127,    0,  124,
      128,  128,  125,    0,  126,    0,  130,  125,  127,  128,
      131,  127,  131,  126,  126,  130,  130,  131,    0,  125,
      127,    0,    0,  128,    0,  128,    0,    0,    0,  130,
      126,    0,  128,  132,    0,  132,  133,  127,  130,  130,
      132,    0,  135,  134,  135,  134,  133,    0,  133,  128,
      134,    0,  136,    0,  136,  130,  132,    0,  132,    0,
      133,    0,    0,  132,  132,  135,  134,  135,  134,  133,

        0,  133,  135,  134,  134,  136,  133,  136,  137,    0,
      137,  136,  136,    0,  138,    0,  138,  139,  140,  139,
      140,    0,  144,  185,  185,  185,  185,  185,    0,    0,
      141,  137,  141,  137,    0,    0,  146,  138,  137,  138,
      139,  140,  139,  140,  138,  146,  141,  139,  140,  143,
      144,  143,  144,  141,  147,  141,    0,    0,  148,  146,
      141,    0,    0,  147,    0,    0,    0,  148,  146,    0,
      143,    0,  143,  144,  143,  144,  151,  147,  151,  143,
      144,  148,    0,  152,    0,  146,  147,  151,  153,  154,
      148,  147,  152,  155,    0,  155,    0,  153,  154,    0,

      151,  151,    0,  147,    0,    0,  152,  148,  157,    0,
      151,  153,  154,    0,    0,  152,  155,  157,  155,  156,
      153,  154,  156,  155,  156,    0,  158,  151,    0,    0,
      160,  157,  152,  161,    0,  158,    0,  153,  154,  160,
      157,  159,  161,  156,    0,  156,  162,  156,    0,  158,
      159,  159,  156,  160,  163,  162,  161,  157,  158,    0,
        0,  164,  160,  163,  159,  161,  165,    0,  165,  162,
      164,    0,    0,  159,  159,  158,    0,  163,  162,  160,
        0,  166,  161,  166,  164,    0,  163,    0,  168,  165,
      159,  165,    0,  164,  167,  162,  165,  167,  168,  167,

      168,    0,    0,  163,  166,    0,  166,  169,    0,  169,
      164,  166,  168,    0,    0,    0,    0,  170,  167,  170,
      167,  168,  167,  168,  170,    0,  171,  167,  168,  173,
      169,    0,  169,    0,  174,  171,  174,  169,  173,    0,
      170,    0,  170,  176,  175,  176,    0,  170,  170,  171,
        0,  178,  173,  175,  177,    0,  177,  174,  171,  174,
      178,  173,    0,  180,  174,    0,  176,  175,  176,  179,
        0,  179,  180,  176,  178,  171,  175,  177,  173,  177,
        0,  181,  182,  178,  177,  187,  180,  187,  184,  188,
      181,  182,  179,  175,  179,  180,    0,  184,    0,  179,

      178,    0,    0,    0,  181,  182,    0,    0,  187,    0,
      187,  184,  180,  181,  182,  187,  189,    0,  189,  182,
      184,    0,    0,    0,  188,  184,  188,  192,    0,  192,
      181,  182,    0,  195,    0,  211,  196,  184,  196,  189,
        0,  189,  195,    0,  211,    0,  189,  188,    0,  188,
      192,    0,  192,    0,  188,    0,  195,  192,  211,  196,
      197,  196,  197,    0,    0,  195,  196,  211,  197,    0,
      198,    0,  198,  199,    0,  199,  198,    0,  199,    0,
        0,    0,  195,  197,  211,  197,  200,  201,  200,  201,
      197,    0,  197,  198,  200,  198,  199,  202,  199,  202,

      198,    0,  199,  199,    0,  202,    0,    0,    0,  200,
      201,  200,  201,  203,    0,  203,  200,  201,  200,  204,
      202,  204,  202,  205,    0,  205,  204,  202,    0,  202,
      205,    0,  206,    0,  206,  209,  203,  209,  203,    0,
        0,    0,  204,  203,  204,    0,  205,    0,  205,  204,
      204,    0,    0,  205,  205,  206,  207,  206,  209,  207,
      209,  207,  206,  212,  208,  209,    0,  208,    0,  208,
      214,    0,  212,    0,    0,    0,  213,  213,    0,  214,
      207,    0,  207,  214,  207,  213,  212,    0,  208,  207,
      208,  215,  208,  214,  216,  212,    0,  208,    0,  213,

      215,  213,  214,  216,  217,    0,  219,  214,  213,  244,
        0,  244,  212,  217,  215,  219,    0,  216,    0,  214,
        0,    0,    0,  215,    0,  213,  216,  217,    0,  219,
        0,  217,  244,  219,  244,    0,  217,    0,  219,  244,
      215,  221,    0,  216,    0,  221,  221,  221,  221,  221,
        0,    0,  222,  217,  225,  219,  222,  222,  222,  222,
      222,  223,  231,  225,  232,  223,  223,  223,  223,  223,
      233,  231,    0,  232,  234,  235,    0,  225,    0,  233,
        0,  233,    0,  234,  235,  231,  225,  232,  249,  249,
      249,  249,  249,  233,  231,    0,  232,  234,  235,  236,

        0,    0,  233,  225,    0,  233,  234,  235,  236,  237,
      236,  231,    0,  232,    0,    0,    0,    0,  237,  233,
      237,    0,  236,  234,  235,  238,    0,  239,    0,  238,
        0,  236,  237,    0,  236,    0,  239,    0,  238,    0,
        0,  237,  240,  240,  237,  245,    0,  245,  236,  238,
      239,  240,  238,    0,  241,    0,  241,  242,  237,  239,
      241,  238,  243,  246,  248,  240,  242,  240,  245,    0,
      245,  243,  246,  248,  240,  245,  239,  241,  238,  241,
      242,    0,    0,    0,  241,  243,  246,  248,    0,  242,
        0,  240,    0,  250,  243,  246,  248,  250,  250,  250,

      250,  250,    0,    0,    0,  257,  242,  258,  259,  260,
      261,  243,  246,  248,  257,    0,  258,  259,  260,  261,
      263,  264,  263,  264,    0,    0,    0,  264,  257,  266,
      258,  259,  260,  261,    0,    0,    0,  257,  266,  258,
      259,  260,  261,  263,  264,  263,  264,  265,    0,  265,
      263,  264,  266,    0,  257,    0,  258,  259,  260,  261,
      267,  266,  267,  269,    0,  269,    0,    0,    0,  288,
      265,  279,  265,  288,  288,  288,  288,  265,  266,    0,
      279,    0,    0,  267,    0,  267,  269,    0,  269,    0,
      267,  271,    0,  269,  279,  271,  271,  271,  271,  271,

      272,  281,  282,  279,  272,  272,  272,  272,  272,  273,
      281,  282,  283,  273,  273,  273,  273,  273,  280,    0,
      279,  283,  280,  285,  281,  282,  286,  286,  286,  286,
      286,  280,  285,  281,  282,  283,    0,    0,    0,  285,
      285,    0,  280,    0,  283,  280,  285,    0,    0,    0,
      281,  282,  287,  292,  280,  285,  287,  287,  287,  287,
      287,  283,  292,    0,  293,  293,  295,  295,  295,  295,
      295,  280,  285,  293,    0,    0,  292,  296,  296,  296,
      296,  296,    0,  298,    0,  292,    0,  293,    0,  293,
      298,  298,  298,  298,  298,    0,  293,  299,    0,    0,

        0,  302,  292,  303,  299,  299,  299,  299,  299,  300,
      302,    0,  303,  293,  304,    0,  300,  300,  300,  300,
      300,  306,    0,  304,  302,    0,  303,    0,  306,  306,
      306,  306,  306,  302,  307,  303,  309,  304,    0,    0,
        0,  307,  307,  307,  307,  309,  304,    0,    0,    0,
      302,    0,  303,    0,    0,    0,    0,    0,    0,  309,
        0,    0,    0,  304,    0,    0,    0,    0,  309,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  309,  311,  311,  311,  313,
      313,  310,  310,  310,  310,  310,  310,  310,  310,  310,

      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "parser/scanner.ll"
#line 2 "parser/scanner.ll"

#include "scanner.hh"
#include <string>
#include <cstdlib>

#define YY_NO_UNISTD_H

using token = yy::Parser::token;

#undef  YY_DECL
#define YY_DECL int Scanner::yylex( yy::Parser::semantic_type * const lval, yy::Parser::location_type *loc )

/* update location on matching */
#define YY_USER_ACTION loc->step(); loc->columns(yyleng);

#line 961 "/mnt/c/Users/paull/Onedrive/Bureau/Compilateur/dessin/build/scanner.cpp"
#line 962 "/mnt/c/Users/paull/Onedrive/Bureau/Compilateur/dessin/build/scanner.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 23 "parser/scanner.ll"


#line 26 "parser/scanner.ll"
    yylval = lval;

#line 1100 "/mnt/c/Users/paull/Onedrive/Bureau/Compilateur/dessin/build/scanner.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 311 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1892 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 28 "parser/scanner.ll"
return token::END;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 30 "parser/scanner.ll"
return '+';
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 31 "parser/scanner.ll"
return '*';
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 32 "parser/scanner.ll"
return '-';
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 33 "parser/scanner.ll"
return '/';
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 34 "parser/scanner.ll"
return '(';
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 35 "parser/scanner.ll"
return ')';
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 36 "parser/scanner.ll"
return '=';
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 37 "parser/scanner.ll"
return ':';
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 38 "parser/scanner.ll"
return '&';
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 39 "parser/scanner.ll"
return ';';
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 40 "parser/scanner.ll"
return '{';
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 41 "parser/scanner.ll"
return '}';
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 42 "parser/scanner.ll"
return '[';
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 43 "parser/scanner.ll"
return ']';
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 44 "parser/scanner.ll"
return '.';
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 45 "parser/scanner.ll"
return '%';
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 46 "parser/scanner.ll"
return ',';
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 50 "parser/scanner.ll"
{
    return token::DEGRE;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 54 "parser/scanner.ll"
{
    return token::AND;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 58 "parser/scanner.ll"
{
    return token::FUNCTION;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 62 "parser/scanner.ll"
{
    return token::SI;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 66 "parser/scanner.ll"
{
    return token::ALORS;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 70 "parser/scanner.ll"
{
    return token::SINON;
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 74 "parser/scanner.ll"
{
    return token::REPETE;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 78 "parser/scanner.ll"
{
    return token::WHILE;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 82 "parser/scanner.ll"
{
    return token::FOIS;
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 86 "parser/scanner.ll"
{
    return token::EQUAL;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 90 "parser/scanner.ll"
{
    return token::NOTEQUAL;
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 94 "parser/scanner.ll"
{
    return token::LESS;
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 98 "parser/scanner.ll"
{
    return token::LESSEQUAL;
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 102 "parser/scanner.ll"
{
    return token::GREATER;
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 106 "parser/scanner.ll"
{
    return token::GREATEREQUAL;
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 110 "parser/scanner.ll"
{
    return token::STRINGEQUAL;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 114 "parser/scanner.ll"
{
    return token::STRINGNOTEQUAL;
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 118 "parser/scanner.ll"
{
    return token::SINON;
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 122 "parser/scanner.ll"
{
    yylval->build<std::string>(YYText());
    return token::TAILLE;
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 127 "parser/scanner.ll"
{
    return token::RECTANGLE;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 131 "parser/scanner.ll"
{
    return token::CARRE;
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 135 "parser/scanner.ll"
{
    return token::TRIANGLE;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 139 "parser/scanner.ll"
{
    return token::CERCLE;
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 143 "parser/scanner.ll"
{
    return token::ELLIPSE;
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 147 "parser/scanner.ll"
{
    return token::LIGNE;
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 151 "parser/scanner.ll"
{
    return token::CHEMIN;
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 155 "parser/scanner.ll"
{
    return token::TEXTE;
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 159 "parser/scanner.ll"
{
    return token::LARGEUR;
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 163 "parser/scanner.ll"
{
    return token::HAUTEUR;
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 167 "parser/scanner.ll"
{
    return token::STOP;
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 171 "parser/scanner.ll"
{
    yylval->build<std::string>(YYText());
    return token::COULEUR;
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 176 "parser/scanner.ll"
{
    yylval->build<std::string>(YYText());
    return token::ROTATION;
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 181 "parser/scanner.ll"
{
    yylval->build<std::string>(YYText());
    return token::REMPLISSAGE;
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 186 "parser/scanner.ll"
{
    yylval->build<std::string>(YYText());
    return token::OPACITE;
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 191 "parser/scanner.ll"
{
    yylval->build<std::string>(YYText());
    return token::EPAISSEUR;
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 196 "parser/scanner.ll"
{
    yylval->build<std::string>(YYText());
    return token::INT_TYPE;
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 201 "parser/scanner.ll"
{
    yylval->build<std::string>(YYText());
    return token::BOOL_TYPE;
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 206 "parser/scanner.ll"
{
    yylval->build<std::string>(YYText());
    return token::FLOAT_TYPE;
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 211 "parser/scanner.ll"
{
    yylval->build<std::string>(YYText());
    return token::POSITIONX;
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 215 "parser/scanner.ll"
{
    yylval->build<std::string>(YYText());
    return token::POSITIONY;
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 220 "parser/scanner.ll"
{
    return token::INLINE_AFFECTATION;
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 224 "parser/scanner.ll"
{
    yylval->build<std::string>(YYText());
    return token::HEXA_VALUE;
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 229 "parser/scanner.ll"
{
    return token::TRUE;
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 233 "parser/scanner.ll"
{
    return token::FALSE;
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 237 "parser/scanner.ll"
{
    yylval->build<int>(std::atoi(YYText()));
    return token::NUMBER;
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 242 "parser/scanner.ll"
{
    yylval->build<float>(std::atoi(YYText()));
    return token::FLOAT;
}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 247 "parser/scanner.ll"
{
    loc->lines();
    return token::NL;
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 253 "parser/scanner.ll"
{
    yylval->build<std::string>(YYText());
    return token::HEXA_VALUE;
}
	YY_BREAK
case 67:
#line 259 "parser/scanner.ll"
case 68:
#line 260 "parser/scanner.ll"
case 69:
#line 261 "parser/scanner.ll"
case 70:
#line 262 "parser/scanner.ll"
case 71:
#line 263 "parser/scanner.ll"
case 72:
#line 264 "parser/scanner.ll"
case 73:
#line 265 "parser/scanner.ll"
case 74:
#line 266 "parser/scanner.ll"
case 75:
YY_RULE_SETUP
#line 266 "parser/scanner.ll"
{
    yylval->build<std::string>(YYText());
    return token::HEXA_VALUE;
}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 272 "parser/scanner.ll"
{
    yylval->build<std::string>(YYText());
    return token::VARIABLE;
}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 278 "parser/scanner.ll"
{
    yylval->build<std::string>(YYText());
    return token::STRING;
}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 284 "parser/scanner.ll"
ECHO;
	YY_BREAK
#line 1645 "/mnt/c/Users/paull/Onedrive/Bureau/Compilateur/dessin/build/scanner.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 311 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 311 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 310);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 284 "parser/scanner.ll"


